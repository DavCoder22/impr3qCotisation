{"remainingRequest":"E:\\impr3qCotisation\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\impr3qCotisation\\frontend\\src\\components\\CotizadorPrincipal.vue?vue&type=style&index=0&id=83ddc7c2&lang=css","dependencies":[{"path":"E:\\impr3qCotisation\\frontend\\src\\components\\CotizadorPrincipal.vue","mtime":1734295662000},{"path":"E:\\impr3qCotisation\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1734185494000},{"path":"E:\\impr3qCotisation\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1734185500000},{"path":"E:\\impr3qCotisation\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1734185498000},{"path":"E:\\impr3qCotisation\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1734185494000},{"path":"E:\\impr3qCotisation\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1734185500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQpmb3JtIHsNCiAgZGlzcGxheTogZmxleDsNCiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsNCiAgbWF4LXdpZHRoOiA0MDBweDsNCn0NCmxhYmVsIHsNCiAgbWFyZ2luLXRvcDogMTBweDsNCn0NCmJ1dHRvbiB7DQogIG1hcmdpbi10b3A6IDIwcHg7DQp9DQoubW9kYWwgew0KICBwb3NpdGlvbjogZml4ZWQ7DQogIHRvcDogMDsNCiAgbGVmdDogMDsNCiAgd2lkdGg6IDEwMCU7DQogIGhlaWdodDogMTAwJTsNCiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjUpOw0KICBkaXNwbGF5OiBmbGV4Ow0KICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCn0NCi5tb2RhbC1jb250ZW50IHsNCiAgYmFja2dyb3VuZDogd2hpdGU7DQogIHBhZGRpbmc6IDIwcHg7DQogIGJvcmRlci1yYWRpdXM6IDVweDsNCn0NCg=="},{"version":3,"sources":["CotizadorPrincipal.vue"],"names":[],"mappings":";AAiOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CotizadorPrincipal.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div>\r\n    <h1>Cotizador de Impresión 3D</h1>\r\n    <form @submit.prevent=\"cotizar\">\r\n      <label>Volumen total (cm³):</label>\r\n      <input type=\"number\" v-model.number=\"form.volumen\" required />\r\n\r\n      <label>Peso material (g):</label>\r\n      <input type=\"number\" v-model.number=\"form.peso\" required />\r\n\r\n      <label>Tiempo de impresión (horas):</label>\r\n      <input type=\"number\" v-model.number=\"form.tiempo\" required />\r\n\r\n      <label>Tipo de filamento:</label>\r\n      <select v-model=\"form.tipo_filamento\" required>\r\n        <option value=\"pla\">PLA</option>\r\n        <option value=\"ptge\">PTGE</option>\r\n        <option value=\"abs\">ABS</option>\r\n        <option value=\"tpu\">TPU</option>\r\n      </select>\r\n\r\n      <label>¿Requiere acabados?</label>\r\n      <select v-model=\"form.acabados\" required>\r\n        <option value=\"true\">Sí</option>\r\n        <option value=\"false\">No</option>\r\n      </select>\r\n\r\n      <label>Costo de envío:</label>\r\n      <input type=\"number\" v-model.number=\"form.envio\" required />\r\n\r\n      <button type=\"submit\">Calcular Cotización</button>\r\n    </form>\r\n\r\n    <div v-if=\"cotizacion\">\r\n      <h2>Resultado de la Cotización</h2>\r\n      <p>Subtotal: ${{ cotizacion.subtotal.toFixed(2) }}</p>\r\n      <button @click=\"confirmarPedido\">Confirmación de Pedido</button>\r\n    </div>\r\n\r\n    <div v-if=\"error\">\r\n      <p>Error: {{ error }}</p>\r\n    </div>\r\n\r\n    <!-- Modal para confirmar pedido -->\r\n    <div v-if=\"showModal\" class=\"modal\">\r\n      <div class=\"modal-content\">\r\n        <h2>Confirmar Pedido</h2>\r\n        <form @submit.prevent=\"enviarPedido\">\r\n          <label>Correo:</label>\r\n          <input type=\"email\" v-model=\"cliente.email\" required @input=\"autocompletarCliente\" />\r\n\r\n          <label>Teléfono:</label>\r\n          <input type=\"text\" v-model=\"cliente.telefono\" required @input=\"autocompletarCliente\" />\r\n\r\n          <p>Total a pagar: ${{ totalConIVA.toFixed(2) }}</p>\r\n\r\n          <button type=\"submit\">Enviar Pedido</button>\r\n          <button type=\"button\" @click=\"showModal = false\">Cancelar</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport { supabase } from '@/supabase'; // Importa Supabase desde el archivo supabase.js usando una ruta relativa\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      form: {\r\n        volumen: \"\",\r\n        peso: \"\",\r\n        tiempo: \"\",\r\n        tipo_filamento: \"pla\",\r\n        acabados: \"false\",\r\n        envio: \"\",\r\n      },\r\n      cotizacion: null,\r\n      showModal: false,\r\n      cliente: {\r\n        email: \"\",\r\n        telefono: \"\",\r\n        nombre: \"\",\r\n        whatsapp: \"\",\r\n      },\r\n      error: null\r\n    };\r\n  },\r\n  methods: {\r\n    async cotizar() {\r\n      try {\r\n        const response = await axios.post(\"http://localhost:5000/cotizar\", this.form);\r\n        this.cotizacion = response.data;\r\n        this.error = null;\r\n      } catch (error) {\r\n        console.error(\"Error al calcular la cotización:\", error);\r\n        this.error = (error.response && error.response.data && error.response.data.error) ? error.response.data.error : \"Error al calcular la cotización\";\r\n      }\r\n    },\r\n    confirmarPedido() {\r\n      this.showModal = true;\r\n    },\r\n    autocompletarCliente() {\r\n      this.cliente.nombre = this.extractNameFromEmail(this.cliente.email);\r\n      this.cliente.whatsapp = this.cliente.telefono;\r\n    },\r\n    extractNameFromEmail(email) {\r\n      return email.split('@')[0];\r\n    },\r\n    async enviarPedido() {\r\n      if (!this.cotizacion) {\r\n        console.error(\"No hay cotización disponible.\");\r\n        alert(\"No hay cotización disponible.\");\r\n        return;\r\n      }\r\n\r\n      if (!supabase) {\r\n        console.error(\"Supabase no está inicializado.\");\r\n        alert(\"Supabase no está inicializado.\");\r\n        return;\r\n      }\r\n\r\n      const totalConIVA = this.cotizacion.subtotal * 1.16; // Asumiendo un IVA del 16%\r\n\r\n      // Verificar y crear el estado del pedido si no existe\r\n      let estadoId;\r\n      const { data: estados, error: errorEstados } = await supabase\r\n        .from('estados_pedido')\r\n        .select('id')\r\n        .eq('nombre', 'pendiente');\r\n\r\n      if (errorEstados) {\r\n        console.error(\"Error al obtener estados del pedido:\", errorEstados);\r\n        alert(\"No se pudo obtener los estados del pedido.\");\r\n        return;\r\n      }\r\n\r\n      if (estados && estados.length > 0) {\r\n        estadoId = estados[0].id;\r\n      } else {\r\n        const { data: nuevoEstado, error: errorNuevoEstado } = await supabase\r\n          .from('estados_pedido')\r\n          .insert([{ nombre: 'pendiente' }]);\r\n\r\n        if (errorNuevoEstado) {\r\n          console.error(\"Error al crear nuevo estado del pedido:\", errorNuevoEstado);\r\n          alert(\"No se pudo crear el estado del pedido.\");\r\n          return;\r\n        }\r\n\r\n        estadoId = nuevoEstado[0].id;\r\n      }\r\n\r\n      // Verificar y crear el cliente si no existe\r\n      let clienteId;\r\n      const { data: clientes, error: errorClientes } = await supabase\r\n        .from('clientes')\r\n        .select('id')\r\n        .eq('email', this.cliente.email);\r\n\r\n      if (errorClientes) {\r\n        console.error(\"Error al obtener clientes:\", errorClientes);\r\n        alert(\"No se pudo obtener los clientes.\");\r\n        return;\r\n      }\r\n\r\n      if (clientes && clientes.length > 0) {\r\n        clienteId = clientes[0].id;\r\n      } else {\r\n        const { data: nuevoCliente, error: errorNuevoCliente } = await supabase\r\n          .from('clientes')\r\n          .insert([{\r\n            nombre: this.cliente.nombre,\r\n            email: this.cliente.email,\r\n            telefono: this.cliente.telefono,\r\n            whatsapp: this.cliente.whatsapp,\r\n          }]);\r\n\r\n        if (errorNuevoCliente) {\r\n          console.error(\"Error al crear nuevo cliente:\", errorNuevoCliente);\r\n          alert(\"No se pudo crear el cliente.\");\r\n          return;\r\n        }\r\n\r\n        clienteId = nuevoCliente[0].id;\r\n      }\r\n\r\n      // Crear el pedido\r\n      const pedido = {\r\n        volumen: this.form.volumen,\r\n        peso: this.form.peso,\r\n        tiempo: this.form.tiempo,\r\n        tipo_filamento: this.form.tipo_filamento,\r\n        acabados: this.form.acabados === \"true\",\r\n        envio: this.form.envio,\r\n        total: totalConIVA,\r\n        estado_id: estadoId,\r\n        cliente_id: clienteId,\r\n        precio_filamento_gramo: this.cotizacion.precio_filamento_gramo,\r\n        fecha_pedido: new Date().toISOString(),\r\n        precio_venta: this.cotizacion.total_final\r\n      };\r\n\r\n      try {\r\n        const { error } = await supabase.from(\"pedidos\").insert([pedido]);\r\n        if (error) throw error;\r\n        alert(\"Pedido guardado exitosamente.\");\r\n        this.showModal = false;\r\n      } catch (error) {\r\n        console.error(\"Error al guardar el pedido:\", error);\r\n        alert(\"No se pudo guardar el pedido.\");\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    totalConIVA() {\r\n      return this.cotizacion ? this.cotizacion.subtotal * 1.16 : 0;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\nform {\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-width: 400px;\r\n}\r\nlabel {\r\n  margin-top: 10px;\r\n}\r\nbutton {\r\n  margin-top: 20px;\r\n}\r\n.modal {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n.modal-content {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n}\r\n</style>\r\n"]}]}